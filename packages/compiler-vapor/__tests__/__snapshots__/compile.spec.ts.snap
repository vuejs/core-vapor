// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compile > bindings 1`] = `
"import { template as _template, children as _children, createTextNode as _createTextNode, insert as _insert, renderEffect as _renderEffect, setText as _setText } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div>count is <!>.</div>")
  const n0 = t0()
  const { 0: [n3, { 1: [n2],}],} = _children(n0)
  const n1 = _createTextNode(_ctx.count)
  _insert(n1, n3, n2)
  _renderEffect(() => {
    _setText(n1, _ctx.count)
  })
  return n0
}"
`;

exports[`compile > directives > custom directive > basic 1`] = `
"import { template as _template, children as _children, withDirectives as _withDirectives } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample]])
  return n0
}"
`;

exports[`compile > directives > custom directive > binding value 1`] = `
"import { template as _template, children as _children, withDirectives as _withDirectives } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg]])
  return n0
}"
`;

exports[`compile > directives > custom directive > dynamic parameters 1`] = `
"import { template as _template, children as _children, withDirectives as _withDirectives } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg, _ctx.foo]])
  return n0
}"
`;

exports[`compile > directives > custom directive > modifiers 1`] = `
"import { template as _template, children as _children, withDirectives as _withDirectives } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg, void 0, { bar: true }]])
  return n0
}"
`;

exports[`compile > directives > custom directive > modifiers w/o binding 1`] = `
"import { template as _template, children as _children, withDirectives as _withDirectives } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, void 0, void 0, { "foo-bar": true }]])
  return n0
}"
`;

exports[`compile > directives > custom directive > static parameters 1`] = `
"import { template as _template, children as _children, withDirectives as _withDirectives } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg, "foo"]])
  return n0
}"
`;

exports[`compile > directives > custom directive > static parameters and modifiers 1`] = `
"import { template as _template, children as _children, withDirectives as _withDirectives } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg, "foo", { bar: true }]])
  return n0
}"
`;

exports[`compile > directives > v-cloak > basic 1`] = `
"import { template as _template } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div>test</div>")
  const n0 = t0()
  return n0
}"
`;

exports[`compile > directives > v-pre > basic 1`] = `
"import { template as _template } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div :id=\\"foo\\"><Comp></Comp>{{ bar }}</div>")
  const n0 = t0()
  return n0
}"
`;

exports[`compile > directives > v-pre > self-closing v-pre 1`] = `
"import { template as _template, children as _children, createTextNode as _createTextNode, append as _append, renderEffect as _renderEffect, setText as _setText, setDynamicProp as _setDynamicProp } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div><div><Comp></Comp></div>")
  const n0 = t0()
  const { 1: [n2],} = _children(n0)
  const n1 = _createTextNode(_ctx.bar)
  _append(n2, n1)
  _renderEffect(() => {
    _setText(n1, _ctx.bar)
  })
  _renderEffect(() => {
    _setDynamicProp(n2, "id", _ctx.foo)
  })
  return n0
}"
`;

exports[`compile > directives > v-pre > should not affect siblings after it 1`] = `
"import { template as _template, children as _children, createTextNode as _createTextNode, append as _append, renderEffect as _renderEffect, setText as _setText, setDynamicProp as _setDynamicProp } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div :id=\\"foo\\"><Comp></Comp>{{ bar }}</div><div><Comp></Comp></div>")
  const n0 = t0()
  const { 1: [n2],} = _children(n0)
  const n1 = _createTextNode(_ctx.bar)
  _append(n2, n1)
  _renderEffect(() => {
    _setText(n1, _ctx.bar)
  })
  _renderEffect(() => {
    _setDynamicProp(n2, "id", _ctx.foo)
  })
  return n0
}"
`;

exports[`compile > dynamic root 1`] = `
"import { fragment as _fragment, createTextNode as _createTextNode, append as _append, renderEffect as _renderEffect, setText as _setText } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _fragment()

  const n0 = t0()
  const n1 = _createTextNode(1)
  const n2 = _createTextNode(2)
  _append(n0, n1, n2)
  _renderEffect(() => {
    _setText(n1, 1)
  })
  _renderEffect(() => {
    _setText(n2, 2)
  })
  return n0
}"
`;

exports[`compile > dynamic root nodes and interpolation 1`] = `
"import { template as _template, children as _children, createTextNode as _createTextNode, prepend as _prepend, insert as _insert, append as _append, on as _on, renderEffect as _renderEffect, setText as _setText, setDynamicProp as _setDynamicProp } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<button>foo<!>foo</button>")
  const n0 = t0()
  const { 0: [n4, { 1: [n5],}],} = _children(n0)
  const n1 = _createTextNode(_ctx.count)
  const n2 = _createTextNode(_ctx.count)
  const n3 = _createTextNode(_ctx.count)
  _prepend(n4, n1)
  _insert(n2, n4, n5)
  _append(n4, n3)
  _on(n4, "click", (...args) => (_ctx.handleClick && _ctx.handleClick(...args)))
  _renderEffect(() => {
    _setText(n1, _ctx.count)
    _setText(n2, _ctx.count)
    _setText(n3, _ctx.count)
    _setDynamicProp(n4, "id", _ctx.count)
  })
  return n0
}"
`;

exports[`compile > expression parsing > interpolation 1`] = `
"(() => {
  const t0 = _fragment()

  const n0 = t0()
  const n1 = _createTextNode(a + b.value)
  _append(n0, n1)
  _renderEffect(() => {
    _setText(n1, a + b.value)
  })
  return n0
})()"
`;

exports[`compile > expression parsing > v-bind 1`] = `
"(() => {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _renderEffect(() => {
    _setDynamicProp(n1, key.value+1, _unref(foo)[key.value+1]())
  })
  return n0
})()"
`;

exports[`compile > fragment 1`] = `
"import { template as _template } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<p></p><span></span><div></div>")
  const n0 = t0()
  return n0
}"
`;

exports[`compile > static + dynamic root 1`] = `
"import { template as _template, children as _children, createTextNode as _createTextNode, prepend as _prepend, insert as _insert, append as _append, renderEffect as _renderEffect, setText as _setText } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("3<!>6<!>9")
  const n0 = t0()
  const { 1: [n9], 3: [n10],} = _children(n0)
  const n1 = _createTextNode(1)
  const n2 = _createTextNode(2)
  const n3 = _createTextNode(4)
  const n4 = _createTextNode(5)
  const n5 = _createTextNode(7)
  const n6 = _createTextNode(8)
  const n7 = _createTextNode('A')
  const n8 = _createTextNode('B')
  _prepend(n0, n1, n2)
  _insert([n3, n4], n0, n9)
  _insert([n5, n6], n0, n10)
  _append(n0, n7, n8)
  _renderEffect(() => {
    _setText(n1, 1)
  })
  _renderEffect(() => {
    _setText(n2, 2)
  })
  _renderEffect(() => {
    _setText(n3, 4)
  })
  _renderEffect(() => {
    _setText(n4, 5)
  })
  _renderEffect(() => {
    _setText(n5, 7)
  })
  _renderEffect(() => {
    _setText(n6, 8)
  })
  _renderEffect(() => {
    _setText(n7, 'A')
  })
  _renderEffect(() => {
    _setText(n8, 'B')
  })
  return n0
}"
`;

exports[`compile > static template 1`] = `
"import { template as _template } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div><p>hello</p><input><span></span></div>")
  const n0 = t0()
  return n0
}"
`;
