// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`A single node containing dynamic content & first 1`] = `
"import { defineComponent as _defineComponent } from 'vue'
import { watchEffect } from 'vue'
import { template, children, insert, on, setAttr, setText } from 'vue/vapor'
const t0 = template(\`<button> foo </button>\`)
import { ref } from 'vue'

export default /*#__PURE__*/_defineComponent({
  setup(__props) {

const count = ref(0)
const handleClick = () => count.value++

return (() => {
const root = t0()
const {} = children(root)
const n1 = document.createTextNode(count.value)
insert(n1, root)
watchEffect(() => {
on(root, \\"click\\", handleClick)
})
watchEffect(() => {
setAttr(root, \\"id\\", undefined, count.value)
setText(n1, undefined, count.value)
})
return root
})();
}

})"
`;

exports[`A single node containing dynamic content & last 1`] = `
"import { defineComponent as _defineComponent } from 'vue'
import { watchEffect } from 'vue'
import { template, children, insert, on, setAttr, setText } from 'vue/vapor'
const t0 = template(\`<button> foo </button>\`)
import { ref } from 'vue'

export default /*#__PURE__*/_defineComponent({
  setup(__props) {

const count = ref(0)
const handleClick = () => count.value++

return (() => {
const root = t0()
const {} = children(root)
const n1 = document.createTextNode(count.value)
insert(n1, root, 0 /* InsertPosition.FIRST */)
watchEffect(() => {
on(root, \\"click\\", handleClick)
})
watchEffect(() => {
setAttr(root, \\"id\\", undefined, count.value)
setText(n1, undefined, count.value)
})
return root
})();
}

})"
`;

exports[`A single node containing dynamic content & text 1`] = `
"import { defineComponent as _defineComponent } from 'vue'
import { watchEffect } from 'vue'
import { template, children, insert, on, setAttr, setText } from 'vue/vapor'
const t0 = template(\`<button> foo <!> foo </button>\`)
import { ref } from 'vue'

export default /*#__PURE__*/_defineComponent({
  setup(__props) {

const count = ref(0)
const handleClick = () => count.value++

return (() => {
const root = t0()
const { 1: [n2],} = children(root)
const n1 = document.createTextNode(count.value)
insert(n1, root, n2)
watchEffect(() => {
on(root, \\"click\\", handleClick)
})
watchEffect(() => {
setAttr(root, \\"id\\", undefined, count.value)
setText(n1, undefined, count.value)
})
return root
})();
}

})"
`;

exports[`A single node containing dynamic content 1`] = `
"import { defineComponent as _defineComponent } from 'vue'
import { watchEffect } from 'vue'
import { template, children, on, setAttr, setText } from 'vue/vapor'
const t0 = template(\`<button></button>\`)
import { ref } from 'vue'

export default /*#__PURE__*/_defineComponent({
  setup(__props) {

const count = ref(0)
const handleClick = () => count.value++

return (() => {
const root = t0()
const {} = children(root)
watchEffect(() => {
on(root, \\"click\\", handleClick)
})
watchEffect(() => {
setAttr(root, \\"id\\", undefined, count.value)
setText(root, undefined, count.value)
})
return root
})();
}

})"
`;

exports[`basic 1`] = `
"import { defineComponent as _defineComponent } from 'vue'
import { watchEffect } from 'vue'
import { template, insert, setText, on, setHtml } from 'vue/vapor'
const t0 = template(\`<h1 id=\\"title\\">Counter</h1><p>Count: </p><p>Double: </p><button>Increment</button><div></div><input type=\\"text\\"><p>once: </p><p>{{ count }}</p>\`)
import { ref, computed } from 'vue'

const html = '<b>HTML</b>'

export default /*#__PURE__*/_defineComponent({
  setup(__props) {

const count = ref(0)
const double = computed(() => count.value * 2)

const increment = () => count.value++


return (() => {
const root = t0()
const n1 = document.createTextNode(count.value)
insert(n1, root)
const n3 = document.createTextNode(double.value)
insert(n3, root)
const n7 = document.createTextNode(count.value)
insert(n7, root)
setText(n7, undefined, count.value)
watchEffect(() => {
setText(n1, undefined, count.value)
})
watchEffect(() => {
setText(n3, undefined, double.value)
})
watchEffect(() => {
on(root, \\"click\\", increment)
})
watchEffect(() => {
setHtml(n5, undefined, html)
})
return root
})();
}

})"
`;
