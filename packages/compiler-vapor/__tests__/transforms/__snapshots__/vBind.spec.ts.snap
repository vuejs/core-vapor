// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compiler: codegen v-bind > .camel modifier 1`] = `
"import { template as _template, children as _children, effect as _effect, setAttr as _setAttr } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _effect(() => {
    _setAttr(n1, "fooBar", undefined, _ctx.id)
  })
  return n0
}"
`;

exports[`compiler: codegen v-bind > dynamic arg 1`] = `
"import { template as _template, children as _children, effect as _effect, setAttr as _setAttr } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _effect(() => {
    _setAttr(n1, _ctx.id, undefined, _ctx.id)
  })
  return n0
}"
`;

exports[`compiler: codegen v-bind > no expression (shorthand) 1`] = `
"import { template as _template, children as _children, effect as _effect, setAttr as _setAttr } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _effect(() => {
    _setAttr(n1, "camel-case", undefined, _ctx.camelCase)
  })
  return n0
}"
`;

exports[`compiler: codegen v-bind > no expression 1`] = `
"import { template as _template, children as _children, effect as _effect, setAttr as _setAttr } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _effect(() => {
    _setAttr(n1, "id", undefined, _ctx.id)
  })
  return n0
}"
`;

exports[`compiler: codegen v-bind > should error if no expression 1`] = `
"import { template as _template } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div arg=\\"\\"></div>")
  const n0 = t0()
  return n0
}"
`;

exports[`compiler: codegen v-bind > simple expression 1`] = `
"import { template as _template, children as _children, effect as _effect, setAttr as _setAttr } from 'vue/vapor';

export function render(_ctx) {
  const t0 = _template("<div></div>")
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _effect(() => {
    _setAttr(n1, "id", undefined, _ctx.id)
  })
  return n0
}"
`;
